#ifndef _DICE_NEURAL_NETWORK_H_
#define _DICE_NEURAL_NETWORK_H_
/*
#include "stdint.h"
#include "compiler.h"

#define NETWORK_SIZE 6
#define MAX_NOTES_IN_LAYER 10
#define BIGGEST_CONNECTION 100

static const float BIAS[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

static const uint16_t LAYER_SIZE[NETWORK_SIZE] = {6, 10, 10, 10, 10, 6};

static const float WEIGHTS[] = {0.521789,0.194542,0.841001,-0.037980,0.374554,-0.290095,-0.300277,0.457237,0.179223,-0.707776,-0.287896,-0.450153,-0.688142,-0.649722,-0.081656,0.343602,0.656520,-0.733677,0.287471,-0.078288,-0.354715,-0.267411,-0.751642,0.128157,-0.019153,-0.258670,0.605326,-0.348002,-0.140343,0.820432,-0.421050,0.108952,0.308794,0.196650,0.335626,-0.133005,-0.218114,0.354583,-0.523166,-0.060970,-0.375152,0.134861,0.356300,0.281388,0.451165,0.503397,0.261177,-0.538802,-0.097606,0.094569,0.244025,0.067866,0.348741,0.437481,0.465493,-0.530518,-0.158023,-0.208286,0.534089,-0.741653,-0.217456,0.045882,-0.359261,0.260916,-0.329786,0.189217,0.461065,-0.283905,0.459447,-0.101594,0.144403,0.630177,0.165083,0.090291,0.131513,0.211042,0.701277,-0.442064,0.061833,0.171928,0.264222,0.749988,0.315729,-0.416317,-0.114955,0.619764,-0.089244,0.358331,-0.264716,0.433167,0.005899,0.415178,0.499261,0.078889,0.559755,0.351316,-0.051962,0.501190,0.042818,0.301322,0.246722,
-0.341762,-0.333975,0.148867,0.387526,0.682809,0.661757,-0.052644,-0.276975,-0.220876,-0.295735,-0.234771,-0.451737,0.142050,0.169192,-0.179215,-0.066283,0.585274,0.057187,-0.323853,-0.357951,-0.427710,-0.557202,-0.341904,0.563833,-0.309621,0.189891,-0.157157,0.365366,0.020887,0.575355,0.137570,-0.405022,0.344789,0.338976,-0.088248,-0.207416,-0.026049,0.238701,-0.345341,-0.223903,0.466067,0.499958,0.554578,-0.339910,-0.295478,-0.317104,-0.005517,-0.362907,-0.430932,-0.145360,-0.173365,-0.426318,-0.013567,-0.263718,0.096293,-0.193512,0.041123,-0.442976,-0.429478,0.383984,0.250344,0.167409,-0.570905,0.090068,-0.150882,0.215839,0.178716,0.216469,0.328005,-0.402029,0.592464,0.051947,0.460716,0.616396,-0.356664,0.471287,-0.009560,0.305103,-0.575819,0.294836,0.540828,0.276407,-0.456706,0.491379,0.339586,-0.375733,-0.288437,0.045763,0.014268,-0.575990,-0.343379,-0.136348,0.426934,-0.212964,0.321575,0.203703,0.034351,0.084602,-0.637915,-0.607551,-0.185295,
-0.188189,-0.521135,0.485683,0.283741,0.260537,0.426331,-0.459646,-0.455509,-0.011160,0.430171,0.390895,0.351393,-0.155968,-0.407815,0.150136,-0.108258,0.032220,-0.022386,-0.507405,0.670444,0.251997,-0.064883,-0.096624,-0.230113,0.528198,-0.393936,-0.235251,-0.608953,0.117722,0.020078,-0.153004,-0.462735,0.351309,0.017430,0.102472,-0.339251,-0.350126,-0.499369,0.002016,0.041378,-0.290949,-0.484988,-0.023428,-0.380311,0.249532,-0.203024,0.154094,0.032565,-0.196666,0.308876,-0.012181,-0.101728,-0.378882,-0.429352,0.183104,-0.095126,0.548075,-0.456670,0.418763,0.220150,-0.071277,0.548419,0.421411,0.298484,0.399528,-0.106379,0.030447,0.333410,-0.115295,0.388310,0.506248,0.246629,0.247674,-0.113403,0.068246,-0.010376,-0.149714,0.010669,-0.444584,0.145294,0.677709,-0.059018,-0.440751,-0.480976,0.186011,-0.213817,0.104683,0.056516,-0.103440,0.414553,-0.204976,-0.185424,0.053437,-0.494019,0.171836,-0.155264,-0.421033,0.151569,0.085275,0.599254,0.191038,
0.264079,-0.082981,0.029849,0.510560,-0.066116,-0.233897,0.217000,-0.145791,-0.212043,-0.196731,-0.270069,-0.375897,-0.368404,-0.439291,-0.110452,-0.532820,-0.145309,-0.145520,-0.122391,0.499065,0.399063,-0.498412,0.012718,0.066946,0.592036,-0.346937,-0.298664,-0.113084,-0.018037,-0.250899,0.182832,-0.157735,-0.297395,0.358797,0.060950,0.008805,-0.045627,0.157028,-0.160482,-0.120227,0.395788,-0.475713,0.253408,0.417707,0.403988,-0.017886,-0.345527,0.224696,-0.327364,-0.368684,-0.492351,-0.337002,-0.275017,-0.120132,0.098424,-0.010314,-0.559741,-0.383522,0.103787,-0.602762,0.101034,0.488943,0.092734,0.264973,0.007167,-0.153909,-0.378704,0.170884,0.065149,0.715271,0.092582,-0.263469,0.141071,-0.043337,-0.548169,0.486170,0.476296,0.238184,0.151260,-0.156047,0.152851,-0.467649,0.494132,-0.546561,-0.529798,0.446351,-0.000308,0.544342,-0.140672,0.452502,-0.351175,0.107697,0.079822,0.073706,-0.383792,-0.022408,0.118877,-0.420379,-0.631916,-0.067466,0.228717,
-0.603143,-0.173780,-0.494569,-0.210737,-0.383592,-0.044287,0.240449,0.246818,-0.207119,0.165568,0.058911,-0.189483,-0.005276,0.573479,0.283788,0.315055};

	
typedef struct {
	uint16_t length;
	float bias;
} layer_connection;

typedef struct {
	layer_connection layer_connections[(NETWORK_SIZE-1)];
} network;

static network nn __SECTION_ZERO("retention_mem_area0");

static void fprop_layer(const layer_connection lc, const uint16_t output_size, float* output, const float* weights, const float* values);
static void get_weights(float* weights, uint16_t connection, network nn);
static void set_values(float* out, const float* in, uint16_t size);
static float act(const float x);

void predict(float* output, const float* input);
void network_init(void);
*/	
#endif // _DICE_NEURAL_NETWORK_H_
